Primary Key

Following syntax creates a table withc1as the primary key.

Syntax

CREATE TABLE table_name (
    c1 t1 NOT NULL PRIMARY KEY, 
...
    cn tn, 
);

Foreign Key
In case of foreign key, we just create a foreign key constraint.

Syntax

CREATE TABLE table2(
  c1 t1 NOT NULL PRIMARY KEY,
  c2 t2,
  FOREIGN KEY(c2) REFERENCES table1(c3) ON DELETE CASCADE
);

Understanding

FOREIGN KEY(c2) REFERENCES table1(c3)

Above part of the foreign key constraint ensure that foreign key can only contain values that are in the referenced primary key.

ON DELETE CASCADE

Ensure that if a row intable1is deleted, then all its related rows intable2will also be deleted.

Note
To enable foreign key constraints in SQLite, usePRAGMA foreign_keys = ON; By default it is enabled in our platform!

Creating Tables in Relational Database
Customer Table

CREATE TABLE customer (
   id INTEGER NOT NULL PRIMARY KEY,
   name VARCHAR(250),
   age INT
);

Product Table

CREATE TABLE product (
  id INTEGER NOT NULL PRIMARY KEY,
  name VARCHAR(250),
  price INT,
  brand VARCHAR(250),
  category VARCHAR(250)
);

Address Table

CREATE TABLE address(
  id INTEGER NOT NULL PRIMARY KEY,
  pin_code INTEGER,
  door_no VARCHAR(250),
  city VARCHAR(250),
  customer_id INTEGER,
  FOREIGN KEY (customer_id) REFERENCES customer(id) ON DELETE CASCADE
);

Cart Table

CREATE TABLE cart(
  id INTEGER NOT NULL PRIMARY KEY,
  customer_id INTEGER NOT NULL UNIQUE,
  total_price INTEGER,
  FOREIGN KEY (customer_id) REFERENCES customer(id) ON DELETE CASCADE
);

Cart Product Table (Junction Table)

CREATE TABLE cart_product(
  id INTEGER NOT NULL PRIMARY KEY,
  cart_id INTEGER,
  product_id INTEGER,
  quantity INTEGER,
  FOREIGN KEY (cart_id) REFERENCES cart(id) ON DELETE CASCADE,
  FOREIGN KEY (product_id) REFERENCES product(id) ON DELETE CASCADE
);
